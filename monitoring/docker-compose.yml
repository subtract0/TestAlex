# ACIM Guide - Complete Monitoring Stack
# Includes Prometheus, Alertmanager, Grafana, and custom exporters
# For monitoring Firebase metrics with PagerDuty escalation

version: '3.8'

services:
  # Firebase Prometheus Exporter
  firebase-exporter:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: acim-firebase-exporter
    ports:
      - "9090:9090"
    environment:
      - METRICS_PORT=9090
      - SCRAPE_INTERVAL=30000
      - FIREBASE_PROJECT_ID=acim-guide-test
      - GRAFANA_CLOUD_PUSH_URL=${GRAFANA_CLOUD_PUSH_URL}
      - GRAFANA_CLOUD_USER=${GRAFANA_CLOUD_USER}
      - GRAFANA_CLOUD_PASSWORD=${GRAFANA_CLOUD_PASSWORD}
      - ENABLE_GRAFANA_PUSH=true
    volumes:
      - ./acim-guide-test-firebase-adminsdk.json:/app/acim-guide-test-firebase-adminsdk.json:ro
      - ./logs:/app/logs
    networks:
      - monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Prometheus Server
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: acim-prometheus
    ports:
      - "9091:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus-rules.yml:/etc/prometheus/rules.yml:ro
      - prometheus_data:/prometheus
    networks:
      - monitoring
    restart: unless-stopped
    depends_on:
      - firebase-exporter

  # Alertmanager
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: acim-alertmanager
    ports:
      - "9093:9093"
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=https://alertmanager.acim-guide.com'
      - '--cluster.advertise-address=0.0.0.0:9093'
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - ./alertmanager-templates:/etc/alertmanager/templates:ro
      - alertmanager_data:/alertmanager
    networks:
      - monitoring
    restart: unless-stopped
    environment:
      - PAGERDUTY_INTEGRATION_KEY=${PAGERDUTY_INTEGRATION_KEY}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - SLACK_API_URL=${SLACK_API_URL}
      - SMTP_PASSWORD=${SMTP_PASSWORD}

  # Grafana (optional local instance, can be replaced with Grafana Cloud)
  grafana:
    image: grafana/grafana:10.1.2
    container_name: acim-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=${SMTP_HOST:-localhost:587}
      - GF_SMTP_USER=${SMTP_USER}
      - GF_SMTP_PASSWORD=${SMTP_PASSWORD}
      - GF_SMTP_FROM_ADDRESS=${SMTP_FROM:-alerts@acim-guide.com}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - monitoring
    restart: unless-stopped
    depends_on:
      - prometheus

  # Node Exporter (for system metrics)
  node-exporter:
    image: prom/node-exporter:v1.6.1
    container_name: acim-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - monitoring
    restart: unless-stopped

  # cAdvisor (for container metrics)
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: acim-cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - monitoring
    restart: unless-stopped
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg

  # Holy Spirit Chaos Engineering Service
  chaos-engineer:
    build:
      context: .
      dockerfile: Dockerfile.chaos
    container_name: acim-chaos-engineer
    ports:
      - "8888:8888"
    environment:
      - PYTHONPATH=/app
      - CHAOS_LOG_LEVEL=INFO
      - FIREBASE_PROJECT_ID=acim-guide-test
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - PAGERDUTY_INTEGRATION_KEY=${PAGERDUTY_INTEGRATION_KEY}
    volumes:
      - ./acim-guide-test-firebase-adminsdk.json:/app/acim-guide-test-firebase-adminsdk.json:ro
      - ./chaos-logs:/app/logs
      - ./chaos-reports:/app/reports
    networks:
      - monitoring
    restart: unless-stopped
    depends_on:
      - prometheus
      - alertmanager

  # Nginx Reverse Proxy (for SSL termination and routing)
  nginx:
    image: nginx:alpine
    container_name: acim-monitoring-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - monitoring
    restart: unless-stopped
    depends_on:
      - prometheus
      - alertmanager
      - grafana

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local

networks:
  monitoring:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
